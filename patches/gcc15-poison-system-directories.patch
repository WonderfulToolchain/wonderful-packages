From 48c670d2678e0323d88eb72205e039f393cabe05 Mon Sep 17 00:00:00 2001
From: Khem Raj <raj.khem@gmail.com>
Date: Fri, 29 Mar 2013 08:59:00 +0400
Subject: [PATCH 03/39] gcc: poison-system-directories

Signed-off-by: Khem Raj <raj.khem@gmail.com>

Upstream-Status: Inappropriate [distribution: codesourcery]

diff -rup gcc-15.1.0.orig/gcc/common.opt gcc-15.1.0/gcc/common.opt
--- gcc-15.1.0.orig/gcc/common.opt	2025-04-25 10:18:00.000000000 +0200
+++ gcc-15.1.0/gcc/common.opt	2025-04-25 16:26:26.951859108 +0200
@@ -729,6 +729,10 @@ Wreturn-local-addr
 Common Var(warn_return_local_addr) Init(1) Warning
 Warn about returning a pointer/reference to a local or temporary variable.
 
+Wpoison-system-directories
+Common Var(flag_poison_system_directories) Init(1) Warning
+Warn for -I and -L options using system directories if cross compiling
+
 Wshadow
 Common Var(warn_shadow) Warning
 Warn when one variable shadows another.  Same as -Wshadow=global.
diff -rup gcc-15.1.0.orig/gcc/config.in gcc-15.1.0/gcc/config.in
--- gcc-15.1.0.orig/gcc/config.in	2025-04-25 10:21:27.000000000 +0200
+++ gcc-15.1.0/gcc/config.in	2025-04-25 16:26:26.951859108 +0200
@@ -249,6 +249,12 @@
 #endif
 
 
+/* Define to warn for use of native system header directories */
+#ifndef USED_FOR_TARGET
+#undef ENABLE_POISON_SYSTEM_DIRECTORIES
+#endif
+
+
 /* Define if you want all operations on RTL (the basic data structure of the
    optimizer and back end) to be checked for dynamic type safety at runtime.
    This is quite expensive. */
diff -rup gcc-15.1.0.orig/gcc/configure gcc-15.1.0/gcc/configure
--- gcc-15.1.0.orig/gcc/configure	2025-04-25 10:21:27.000000000 +0200
+++ gcc-15.1.0/gcc/configure	2025-04-25 16:26:26.955192440 +0200
@@ -1051,6 +1051,7 @@ enable_maintainer_mode
 enable_link_mutex
 enable_link_serialization
 enable_version_specific_runtime_libs
+enable_poison_system_directories
 enable_plugin
 enable_host_shared
 enable_host_pie
@@ -1828,6 +1829,8 @@ Optional Features:
   --enable-version-specific-runtime-libs
                           specify that runtime libraries should be installed
                           in a compiler-specific directory
+  --enable-poison-system-directories
+                          warn for use of native system header directories
   --enable-plugin         enable plugin support
   --enable-host-shared    build host code as shared libraries
   --enable-host-pie       build host code as PIE
@@ -34027,6 +34030,19 @@ if test "${enable_version_specific_runti
 fi
 
 
+# Check whether --enable-poison-system-directories was given.
+if test "${enable_poison_system_directories+set}" = set; then :
+  enableval=$enable_poison_system_directories;
+else
+  enable_poison_system_directories=no
+fi
+
+if test "x${enable_poison_system_directories}" = "xyes"; then
+
+$as_echo "#define ENABLE_POISON_SYSTEM_DIRECTORIES 1" >>confdefs.h
+
+fi
+
 # Substitute configuration variables
 
 
diff -rup gcc-15.1.0.orig/gcc/configure.ac gcc-15.1.0/gcc/configure.ac
--- gcc-15.1.0.orig/gcc/configure.ac	2025-04-25 10:18:00.000000000 +0200
+++ gcc-15.1.0/gcc/configure.ac	2025-04-25 16:26:26.958525775 +0200
@@ -7502,6 +7502,16 @@ AC_ARG_ENABLE(version-specific-runtime-l
                 [specify that runtime libraries should be
                  installed in a compiler-specific directory])])
 
+AC_ARG_ENABLE([poison-system-directories],
+             AS_HELP_STRING([--enable-poison-system-directories],
+                            [warn for use of native system header directories]),,
+             [enable_poison_system_directories=no])
+if test "x${enable_poison_system_directories}" = "xyes"; then
+  AC_DEFINE([ENABLE_POISON_SYSTEM_DIRECTORIES],
+           [1],
+           [Define to warn for use of native system header directories])
+fi
+
 # Substitute configuration variables
 AC_SUBST(subdirs)
 AC_SUBST(srcdir)
diff -rup gcc-15.1.0.orig/gcc/doc/invoke.texi gcc-15.1.0/gcc/doc/invoke.texi
--- gcc-15.1.0.orig/gcc/doc/invoke.texi	2025-04-25 10:18:00.000000000 +0200
+++ gcc-15.1.0/gcc/doc/invoke.texi	2025-04-25 16:26:40.431858817 +0200
@@ -405,6 +405,7 @@ Objective-C and Objective-C++ Dialects}.
 -Wpacked  -Wno-packed-bitfield-compat  -Wpacked-not-aligned  -Wpadded
 -Wparentheses  -Wno-pedantic-ms-format
 -Wpointer-arith  -Wno-pointer-compare  -Wno-pointer-to-int-cast
+-Wno-poison-system-directories
 -Wno-pragmas  -Wno-pragma-once-outside-header  -Wno-prio-ctor-dtor
 -Wno-psabi
 -Wredundant-decls  -Wrestrict
@@ -9093,6 +9094,14 @@ made up of data only and thus requires n
 most targets, it is made up of code and thus requires the stack to be
 made executable in order for the program to work properly.
 
+@opindex Wno-poison-system-directories
+@item -Wno-poison-system-directories
+Do not warn for @option{-I} or @option{-L} options using system
+directories such as @file{/usr/include} when cross compiling.  This
+option is intended for use in chroot environments when such
+directories contain the correct headers and libraries for the target
+system rather than the host.
+
 @opindex Wfloat-equal
 @opindex Wno-float-equal
 @item -Wfloat-equal
diff -rup gcc-15.1.0.orig/gcc/gcc.cc gcc-15.1.0/gcc/gcc.cc
--- gcc-15.1.0.orig/gcc/gcc.cc	2025-04-25 10:18:00.000000000 +0200
+++ gcc-15.1.0/gcc/gcc.cc	2025-04-25 16:26:26.961859108 +0200
@@ -1166,6 +1166,8 @@ proper position among the other output f
    "%{fuse-ld=*:-fuse-ld=%*} " LINK_COMPRESS_DEBUG_SPEC \
    "%X %{o*} %{e*} %{N} %{n} %{r}\
     %{s} %{t} %{u*} %{z} %{Z} %{!nostdlib:%{!r:%{!nostartfiles:%S}}} \
+    %{Wno-poison-system-directories:--no-poison-system-directories} \
+    %{Werror=poison-system-directories:--error-poison-system-directories} \
     %{static|no-pie|static-pie:} %@{L*} %(link_libgcc) " \
     VTABLE_VERIFICATION_SPEC " " SANITIZER_EARLY_SPEC " %o "" \
     %{fopenacc|fopenmp|%:gt(%{ftree-parallelize-loops=*:%*} 1):\
diff -rup gcc-15.1.0.orig/gcc/incpath.cc gcc-15.1.0/gcc/incpath.cc
--- gcc-15.1.0.orig/gcc/incpath.cc	2025-04-25 10:18:00.000000000 +0200
+++ gcc-15.1.0/gcc/incpath.cc	2025-04-25 16:26:26.965192441 +0200
@@ -26,6 +26,7 @@
 #include "intl.h"
 #include "incpath.h"
 #include "cppdefault.h"
+#include "diagnostic-core.h"
 
 /* Microsoft Windows does not natively support inodes.
    VMS has non-numeric inodes.  */
@@ -411,6 +412,26 @@ merge_include_chains (const char *sysroo
 	  fprintf (stderr, _("End of #embed search list.\n"));
 	}
     }
+
+#ifdef ENABLE_POISON_SYSTEM_DIRECTORIES
+  if (flag_poison_system_directories)
+    {
+       struct cpp_dir *p;
+
+       for (p = heads[INC_QUOTE]; p; p = p->next)
+         {
+          if ((!strncmp (p->name, "/usr/include", 12))
+              || (!strncmp (p->name, "/usr/local/include", 18))
+              || (!strncmp (p->name, "/usr/X11R6/include", 18))
+              || (!strncmp (p->name, "/sw/include", 11))
+              || (!strncmp (p->name, "/opt/include", 12)))
+            warning (OPT_Wpoison_system_directories,
+                     "include location \"%s\" is unsafe for "
+                     "cross-compilation",
+                     p->name);
+         }
+    }
+#endif
 }
 
 /* Use given -I paths for #include "..." but not #include <...>, and
